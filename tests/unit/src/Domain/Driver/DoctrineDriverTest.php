<?php namespace Tuxion\DoctrineRest\Domain\Driver;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\SchemaTool;
use Doctrine\ORM\Tools\Setup as DoctrineSetup;
use Tuxion\DoctrineRest\Domain\Result\ErrorResult;
use Tuxion\DoctrineRest\Domain\Result\ResultFactory;

class DoctrineDriverTest extends \PHPUnit_Framework_TestCase
{
  
  protected $manager;
  protected $dummyEntity;
  
  public function setUp()
  {
    
    //What model will we use?
    $this->dummyEntity = 'Tuxion\DoctrineRest\Domain\Dummy\DummyEntity';
    
    //Get files from /tests/unit/src/Domain/Dummy
    $isDevMode = true;
    $config = DoctrineSetup::createAnnotationMetadataConfiguration(
      array(dirname(__DIR__).'/Dummy'), $isDevMode
    );
    
    //Get DB connection info for /tests/unit/db.sqlite
    $connection = array(
      'driver'    => 'pdo_sqlite',
      'memory'    => true
    );
    
    //Create the entity manager.
    $this->manager = EntityManager::create($connection, $config);
    
    //Force create schema for DummyEntity
    $schemaTool = new SchemaTool($this->manager);
    $schemaTool->createSchema(array(
      $this->manager->getClassMetadata($this->dummyEntity)
    ));
    
  }
  
  protected function newResultFactory()
  {
    return new ResultFactory();
  }
  
  public function testConstructor()
  {
    return new DoctrineDriver($this->manager);
  }
  
  /**
   * @depends testConstructor
   */
  public function testResultFactorySetter($driver)
  {
    $driver->setResultFactory($this->newResultFactory());
    return $driver;
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testCreateDummy($driver)
  {
    
    $id = 1;
    $body = array('title' => 'Testing 1, 2, 3...');
    $result = $driver->create($this->dummyEntity, $body);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\CreatedResult', $result);
    
    //The body must contain a DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $output[0]);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $output[0]->getTitle());
    
    //The id must be generated by the auto_increment strategy.
    $this->assertEquals($id, $output[0]->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testCreateInvalidBodyDummy($driver)
  {
    
    //We should be missing the title...
    $body = array();
    $result = $driver->create($this->dummyEntity, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testReadDummy($driver)
  {
    
    $id = 1;
    $body = array('title' => 'Testing 1, 2, 3...');
    $result = $driver->read($this->dummyEntity, $id);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\FoundResult', $result);
    
    //The body must contain a DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $output[0]);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $output[0]->getTitle());
    
    //The id must be the same.
    $this->assertEquals(1, $output[0]->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReadNotFoundDummy($driver)
  {
    
    //There should be no DummyEntity with this ID.
    $id = 666;
    $result = $driver->read($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\NotFoundResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReadInvalidIdDummy($driver)
  {
    
    //This is not a valid ID.
    $id = null;
    $result = $driver->read($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testReplaceDummy($driver)
  {
    
    $id = 1;
    $body = array('title' => 'New title to use.');
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ReplacedResult', $result);
    
    //The body must contain a DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $output[0]);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $output[0]->getTitle());
    
    //The id must be generated by the auto_increment strategy.
    $this->assertEquals($id, $output[0]->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceInvalidBodyDummy($driver)
  {
    
    //This unsets the title...
    $id = 1;
    $body = array('title'=>null);
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceNotFoundIdDummy($driver)
  {
    
    //This unsets the title...
    $id = 666;
    $body = array('title'=>'Otherwise valid title...');
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\NotFoundResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceInvalidIdDummy($driver)
  {
    
    //This unsets the title...
    $id = null;
    $body = array('title'=>'Otherwise valid title...');
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testDeleteDummy($driver)
  {
    
    $id = 1;
    $result = $driver->delete($this->dummyEntity, $id);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\DeletedResult', $result);
    
    //The body must contain an empty array.
    $output = $result->getBody();
    $this->assertEquals(array(), $output);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testDeleteNotFoundDummy($driver)
  {
    
    //There should be no DummyEntity with this ID.
    $id = 666;
    $result = $driver->delete($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\NotFoundResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testDeleteInvalidIdDummy($driver)
  {
    
    //This is not a valid ID.
    $id = null;
    $result = $driver->delete($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
}