<?php namespace Tuxion\DoctrineRest\Domain\Driver;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Tools\SchemaTool;
use Doctrine\ORM\Tools\Setup as DoctrineSetup;
use Tuxion\DoctrineRest\Domain\Result\ErrorResult;
use Tuxion\DoctrineRest\Domain\Result\ResultFactory;

class DoctrineDriverTest extends \PHPUnit_Framework_TestCase
{
  
  protected $manager;
  protected $dummyEntity;
  protected $unassignableEntity;
  
  public function setUp()
  {
    
    //What model will we use?
    $this->dummyEntity = 'Tuxion\DoctrineRest\Domain\Dummy\DummyEntity';
    $this->unassignableEntity = 'Tuxion\DoctrineRest\Domain\Dummy\UnassignableEntity';
    
    //Get files from /tests/unit/src/Domain/Dummy
    $isDevMode = true;
    $config = DoctrineSetup::createAnnotationMetadataConfiguration(
      array(dirname(__DIR__).'/Dummy'), $isDevMode
    );
    
    //Get DB connection info for sqlite in-memory temporary databases
    $connection = array(
      'driver'    => 'pdo_sqlite',
      'memory'    => true
    );
    
    //Create the entity manager.
    $this->manager = EntityManager::create($connection, $config);
    
    //Force create schema for DummyEntity and UnassignableEntity.
    $schemaTool = new SchemaTool($this->manager);
    $schemaTool->createSchema(array(
      $this->manager->getClassMetadata($this->dummyEntity),
      $this->manager->getClassMetadata($this->unassignableEntity)
    ));
    
  }
  
  protected function newResultFactory()
  {
    return new ResultFactory();
  }
  
  public function testConstructor()
  {
    return new DoctrineDriver($this->manager);
  }
  
  /**
   * @depends testConstructor
   */
  public function testResultFactorySetter($driver)
  {
    $driver->setResultFactory($this->newResultFactory());
    return $driver;
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testCreateDummy($driver)
  {
    
    $id = 1;
    $body = array('title' => 'Testing 1, 2, 3...');
    $result = $driver->create($this->dummyEntity, $body);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\CreatedResult', $result);
    
    //The body must contain a DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $output);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $output->getTitle());
    
    //The id must be generated by the auto_increment strategy.
    $this->assertEquals($id, $output->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testCreateInvalidBodyDummy($driver)
  {
    
    //We should be missing the title...
    $body = array();
    $result = $driver->create($this->dummyEntity, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testCreateInvalidModel($driver)
  {
    
    //Otherwise fine body...
    $body = array('title' => 'Strange class...');
    $result = $driver->create($this->unassignableEntity, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testReadDummy($driver)
  {
    
    $id = 1;
    $body = array('title' => 'Testing 1, 2, 3...');
    $result = $driver->read($this->dummyEntity, $id);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\FoundResult', $result);
    
    //The body must contain a DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $output);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $output->getTitle());
    
    //The id must be the same.
    $this->assertEquals(1, $output->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testReadAllDummies($driver)
  {
    
    $body = array('title' => 'Testing 1, 2, 3...');
    $result = $driver->readAll($this->dummyEntity);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\FoundResult', $result);
    
    //The body must contain an array with DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInternalType('array', $output);
    $row1 = $output[0];
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $row1);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $row1->getTitle());
    
    //The id must be the same.
    $this->assertEquals(1, $row1->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReadNotFoundDummy($driver)
  {
    
    //There should be no DummyEntity with this ID.
    $id = 666;
    $result = $driver->read($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\NotFoundResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReadInvalidIdDummy($driver)
  {
    
    //This is not a valid ID.
    $id = 'sixteen';
    $result = $driver->read($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
    //Define the exception we're expecting.
    $this->setExpectedException(
      'Exception', "Invalid ID \"sixteen\" should be a positive integer."
    );
    throw $result->getException();
    
  }
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testReplaceDummy($driver)
  {
    
    $id = 1;
    $body = array('title' => 'New title to use.');
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ReplacedResult', $result);
    
    //The body must contain a DummyEntity as first row.
    $output = $result->getBody();
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Dummy\DummyEntity', $output);
    
    //The title must be properly set.
    $this->assertSame($body['title'], $output->getTitle());
    
    //The id must be generated by the auto_increment strategy.
    $this->assertEquals($id, $output->getId());
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceInvalidBodyDummy($driver)
  {
    
    //This unsets the title...
    $id = 1;
    $body = array('title'=>null);
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceNotFoundIdDummy($driver)
  {
    
    //There should be no DummyEntity with this ID.
    $id = 666;
    $body = array('title'=>'Otherwise valid title...');
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\NotFoundResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceInvalidIdDummy($driver)
  {
    
    //This is not a valid ID.
    $id = null;
    $body = array('title'=>'Otherwise valid title...');
    $result = $driver->replace($this->dummyEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testReplaceInvalidModel($driver)
  {
    
    //An entry needs to be forced into the database.
    //Otherwise we will get a NotFound result.
    $model = $this->unassignableEntity;
    $example = new $model();
    $example->setTitle('Testing entry...');
    $manager = $driver->getManager();
    $manager->persist($example);
    $manager->flush();
    
    //Otherwise fine body...
    $id = $example->getId();
    $body = array('title' => 'Strange class...');
    $result = $driver->replace($this->unassignableEntity, $id, $body);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   * @depends testCreateDummy
   */
  public function testDeleteDummy($driver)
  {
    
    $id = 1;
    $result = $driver->delete($this->dummyEntity, $id);
    
    //Detailed exception output helps, so throw ErrorResult exceptions.
    if($result instanceof ErrorResult){
      throw new \Exception("An ErrorResult was thrown.", 0, $result->getException());
    }
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\DeletedResult', $result);
    
    //The body must be empty.
    $output = $result->getBody();
    $this->assertEquals(null, $output);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testDeleteNotFoundDummy($driver)
  {
    
    //There should be no DummyEntity with this ID.
    $id = 666;
    $result = $driver->delete($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\NotFoundResult', $result);
    
  }
  
  /**
   * @depends testResultFactorySetter
   */
  public function testDeleteInvalidIdDummy($driver)
  {
    
    //This is not a valid ID.
    $id = null;
    $result = $driver->delete($this->dummyEntity, $id);
    
    //Check the result class matches.
    $this->assertInstanceOf('Tuxion\DoctrineRest\Domain\Result\ErrorResult', $result);
    
  }
  
}
